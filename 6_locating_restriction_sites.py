from complementing_a_strand_of_dna import reverse_complement

input_seq = "TATAGTGTTGCACTCATAGTCAGCAAGTCTGCATGCTTCTCTCAAACCGTTACGTGTGTGAGTAATCGAGTACCCCCATTAATCTGCCACGACAGTCATTAAATTCCATGTCGTGGGCCTGGTCGCAGAGACACCGCTCGGTATCCTGCGGACGAACCGAATCCCTTGGGAACGCCGAGAAATTTTTTGCGTACCTCTGACAACGTTATCGCTGGGCCAAAAATCTTCGCATTCAGTCGAAACCCGGGGCCCGGGTACCGGTAGGGTCCGGGTCAGGGGACGAATGTACGTTAGTTTATGACGGCGCTCAGGCCGGTAACCTTCGACCATTCCAGGATGCGGTATCAACTAGGGATCCCCCAGCGACGCCTCCGGGGTAAAAATTTCCAGTTAGGGGAGCCTATGCCGCCTTCAATATCAACGGCCTATCTACAACTTCGGGACAACTTCCCCTGGGCGTGTGAATCTGCGCCTTCTAGATCTAGATCGTCAACGGACGCAAATAGTATTTGGCCACATCAGAGCCCTCCGTCCATGAGACTACAGCATCCTGGTATCCGGTCGCCGTGTGGCTACCTTCCTTCTATCGAGGACTATGAGTGGGTGCGATCCAATGGAAGACAAAACGCGCAGTCTGCCGATGATAAGTTATCTTTTTTGGACGTGGCTCAACAACCGACAGCTACAATCGCGCGCGTCAATACCGTTGATGCGTGTCCATTTCACCAGCTAGGAATAGCTCTGAGCTCCGCTAGTAGGGCGTAGGGAGTTGCTGATTTTGCGGACGCGCGTGTCACAAAGAGAGTTCTTGATAATAACCAATAGACAAATGGGGGGTCCCGACTGCAGCGTTAGACACCAATTCAATGAAGCGCCAGACCTCATTTGAGCACAGTTTATCTCTTTCATTTGCTGGGCGTTAACACGATTAGGTTTAAACCCTAGCAATGTGACATGCGC"

for index in range(len(input_seq)):
    for palindrome_length in range(4, 13):
        substring = input_seq[index : index + palindrome_length]
        if substring == reverse_complement(substring) and index + palindrome_length <= len(input_seq):
            print(index + 1, palindrome_length)